import json

import dotenv
import asyncio
import os
from pathlib import Path
import requests
from random import randint
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.enums import ParseMode

from backend.user_data_service import get_data, save_data
from backend.models import ResultMeas
from backend.audio_service import trans_audio

project_path = Path.cwd().parent
data_path = project_path / "data"
data_path.mkdir(exist_ok=True)
users_path = project_path / "data" / "users.json"

dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

rand_sp_word = ["–†—ã–±–∞ —Ä–∞–¥—É —Ä–∞–¥—É–µ—Ç, —Ä—ã–±–∞ —Ä–∞–¥–æ—Å—Ç–Ω–∞ –≤—Å–µ–≥–¥–∞.",
    "–†–æ–º–∞ —Ä–æ—Å—Ç–æ–º —Ä–æ—Å, –¥–∞ –Ω–µ –¥–æ—Ä–æ—Å.",
    "–†–∞–Ω–æ —Ä–æ–∑–∞ —Ä–∞—Å–ø—É—Å—Ç–∏–ª–∞—Å—å, —Ä–∞–Ω–æ —Ä–æ–∑–∞ –æ—Ç—Ü–≤–µ–ª–∞.",
    "–†—É–±—è—Ç —Ä–æ–≤–Ω–æ, —Ä—É–±—è—Ç —Ä—å—è–Ω–æ, —Ä—É–±—è—Ç —Ä–æ—â—É —É —Ä–µ–∫–∏.",
    "–†–æ–π –≤–æ—Ä–æ–±—å—ë–≤ —Ä–∞—Å—Ç—Ä–µ–≤–æ–∂–∏–ª —Ä—è–±—á–∏–∫–∞.",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ä–∞–∫–∞, –ø—Ä–æ —Ä–∞–∫–æ–≤—É –∂–µ–Ω—É.",
    "–†–∞–º–∫–∞ —Ä–≤—ë—Ç—Å—è, —Ä–æ—Ç —Ä–∞—Å–∫—Ä—ã–ª—Å—è, —Ä—ã—á–∏—Ç —Ä–∞—Å—Å–µ—Ä–∂–µ–Ω–Ω—ã–π —Ä–æ—Ç–≤–µ–π–ª–µ—Ä.",
    "–†–µ–∫–∞ —Ä–∞–∑–ª–∏–ª–∞—Å—å, —Ä–∞–∑–æ–º —Ä–æ—â—É —Ä–∞–∑–¥–µ–ª–∏–ª–∞.",
    "–†–æ–±–∫–∏–π —Ä–æ–≤–Ω—ã–π —Ä—è–¥ —Ä–µ–±—è—Ç —Ä–∏—Ç–º–∏—á–Ω–æ —Ä–µ—á–∫—É —Ä–æ–µ—Ç.",
    "–†–∞–Ω–æ —É—Ç—Ä–æ–º —Ä–∞–¥—É–≥–∞ —Ä–∞–∑–ª–∏–ª–∞—Å—å —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç—å–µ–º.",
    "–†–µ–∫—Ä—É—Ç—ã —Ä—É–≥–∞–ª–∏ —Ä–æ—Å—Ç–æ–≤—â–∏–∫–∞ –∑–∞ —Ä–∞–∑–±–∏—Ç—ã–π —Ä—É–±–ª—å.",
    "–†—è–±–∏–Ω–∞ —Ä—ã–∂–∞—è —Ä–æ–Ω—è–µ—Ç —Ä–æ—Å—Å—ã–ø—å—é —Ä—è–±—ã–µ –ª–∏—Å—Ç—å—è.",
    "–†—É—á–µ—ë–∫ —Ä–∞–¥—É–∂–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞–ª —Ä–æ–≤ —É —Ä–æ—â–∏—Ü—ã.",
    "–†–∞–∫ —Ä—ã—á–∏—Ç, —Ä–æ—Ç —Ä–∞–∑–∏–Ω—É–ª, —Ä—ã–±—É —Ä–≤—ë—Ç –Ω–∞ —Ä–æ–≤–Ω—ã–µ –∫—É—Å–∫–∏.",
    "–†–æ—â–∞ —Ä–∞—Å—Å—ã–ø–∞–ª–∞ —Ä—è–±–∏–Ω—É —Ä–æ—Å—Å—ã–ø—å—é —Ä—ã–∂–µ–π.",
    "–†–≤–∞–Ω—ã–π —Ä—é–∫–∑–∞–∫ —Ä–∞—Å—Ç–µ—Ä—è–ª —Ä–∞–∑–Ω—ã–µ —Ä–µ–¥–∫–∏–µ –≤–µ—â–∏.",
    "–†–æ–º–∞—à–∫–æ–≤—ã–π —Ä–æ–π —Ä–µ–∑–≤–æ —Ä—ã—Å–∫–∞–µ—Ç —Ä—è–¥–æ–º.",
    "–†–µ–∫–∞ —Ä—ã—á–∏—Ç, —Ä—è–±—å —Ä–∞–∑–Ω–æ—Å–∏—Ç —Ä–æ–≤–Ω—ã–º–∏ –∫—Ä—É–≥–∞–º–∏.",
    "–†—ã–±–∞–∫ —Ä—ã–±–∞—á–∏–ª, —Ä—ã–±—É —Ä–µ–∑–∞–ª, —Ä–æ–≤–Ω–æ —Ä–∞–∑–¥–µ–ª–∏–ª –∫—É—Å–∫–∏.",
    "–†—ã–∂–∏–π —Ä—ã—Å–∞–∫ —Ä–µ–∑–≤–æ —Ä–≤–∞–Ω—É–ª —Ä—ã—Å—å—é.",
    "–†–µ–º–µ–Ω—å —Ä–≤—ë—Ç—Å—è, —Ä—é–∫–∑–∞–∫ —Ä–≤—ë—Ç —Ä—É–±–∞—Ö—É.",
    "–†—ë–≤ —Ä–∞—Å–∫–∞—Ç–∏—Å—Ç—ã–π —Ä–∞–∑–¥–∞–ª—Å—è —Ä—è–¥–æ–º —Å —Ä–æ—â–µ–π.",
    "–†—è–±–∏–Ω–∞ —Ä–¥–µ–µ—Ç, —Ä–æ—Å–∞ —Ä–∞—Å—Å–≤–µ—Ç–Ω–∞—è —Ä–∞—Å–ø–ª–µ—Å–∫–∞–ª–∞—Å—å.",
    "–†—ã–±–∞–∫ —Ä—é–º–∫—É —Ä–æ–Ω—è–µ—Ç ‚Äì —Ä—Ç—É—Ç—å —Ä–∞–∑–ª–∏–≤–∞–µ—Ç—Å—è.",
    "–†–∂–∞–≤—ã–π —Ä–æ–±–æ—Ç —Ä–∏—Ç–º–∏—á–Ω–æ —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–µ—Ç —Ä–æ—Ç–æ—Ä.",
    "–†–æ–π —Ä—è–±—á–∏–∫–æ–≤ —Ä–µ–∑–≤–æ —Ä–∏–Ω—É–ª—Å—è –≤ —Ä–æ—â—É.",
    "–†–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–µ —Ä–æ–∑—ã —Ä–∞—Å–ø—É—Å—Ç–∏–ª–∏—Å—å –≤ —Ä–æ—Å–µ.",
    "–†–æ–¥–Ω–∏–∫ —Ä–∞–∑–ª–∏–ª—Å—è, —Ä–æ–º–∞—à–∫–∏ —Ä–∞—Å–∫–∏–Ω—É–ª–∏—Å—å —Ä—è–¥–æ–º.",
    "–†–∞–∫ —Ä–∞—Å–ø—Ä–∞–≤–∏–ª —Ä—ã–∂–∏–µ —Ä–æ–≥–∞, —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –∏ —Ä–≤–∞–Ω—É–ª.",
    "–†–µ–∑–∫–æ —Ä–∏–Ω—É–ª—Å—è —Ä–µ—Ç–∏–≤—ã–π —Ä—ã—Å–∞–∫, —Ä–æ–Ω—è—è —Ä—ã–∂—É—é –≥—Ä–∏–≤—É."


]
@dp.message(Command("start"))
async def start_message(message: types.Message):
    await message.answer(
        text="<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .mp3 –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Ä–µ—á–∏!\n–ù–∞–ø–∏—à–∏ /profile —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏!\n–ù–∞–ø–∏—à–∏ /task —á—Ç–æ–±—ã —è –¥–∞–ª —Ç–µ–±–µ —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫—É",
        parse_mode=ParseMode.HTML
    )


@dp.message(Command("profile"))
async def profile_message(message: types.Message):
    user_id = str(message.from_user.id)

    result = get_data(users_path, user_id)
    if result:
        result_meas = ResultMeas(
            data_last_meas=result.data_last_meas,
            res_last_meas=result.res_last_meas
        )

        message_res = f"<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {result_meas.data_last_meas.strftime('%Y-%m-%d %H:%M')}\n<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞–≤–æ—Å—Ç—å:</b> {'–¥–∞' if result_meas.res_last_meas else '–Ω–µ—Ç'}"
    else:
        message_res = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–∞—Ä—Ç–∞–≤–æ—Å—Ç—å"

    await message.answer(
        text=message_res,
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("task"))
async def task_message(message: types.Message):
    await message.answer(
        text=f"–ü–æ–≤—Ç–æ—Ä–∏-–∫–∞:\n{rand_sp_word[randint(0, 29)]}",
        parse_mode=ParseMode.HTML
    )


@dp.message(lambda message: message.audio or message.voice)
async def audio(message: types.Message):
    user_id = str(message.from_user.id)
    file_id = message.audio.file_id if message.audio else message.voice.file_id

    file = await bot.get_file(file_id)
    file_path = file.file_path
    destination = data_path / f"audio_{user_id}.mp3"

    await bot.download_file(file_path, destination=destination)

    data_last_meas = datetime.now()
    translated_audio, sr = trans_audio(destination)

    data = json.dumps({
        "y": translated_audio,
        "sr": sr
    })

    response = requests.post(url=f"http://127.0.0.1:8000/libr_audio/", data=data)

    if response.status_code == 200:
        res_last_meas = response.json()["burr"]
        result_meas = ResultMeas(data_last_meas=data_last_meas, res_last_meas=res_last_meas)

        if res_last_meas:
            message_res = "<b>–£ –≤–∞—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∞–≤–æ—Å—Ç—å</b>‚ùå"
        else:
            message_res = "<b>–£ –≤–∞—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–∞–≤–æ—Å—Ç–∏</b>‚úÖ"

        save_data(users_path, user_id, result_meas)
    else:
        message_res = "<b>–ù–µ—É–¥–∞—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏</b>‚ùå"

    await message.reply(
        text=message_res,
        parse_mode=ParseMode.HTML
    )

    if destination.exists():
        destination.unlink()


async def main():
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(main())
